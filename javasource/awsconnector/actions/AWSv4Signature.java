// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package awsconnector.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.Map;
import java.util.TreeMap;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import awsconnector.helpers.AWSV4Auth;
import awsconnector.proxies.AWSHeader;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class AWSv4Signature extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __awsV4Signature;
	private awsconnector.proxies.AWSv4Signature awsV4Signature;

	public AWSv4Signature(IContext context, IMendixObject awsV4Signature)
	{
		super(context);
		this.__awsV4Signature = awsV4Signature;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.awsV4Signature = this.__awsV4Signature == null ? null : awsconnector.proxies.AWSv4Signature.initialize(getContext(), __awsV4Signature);

		// BEGIN USER CODE
		/**
		 * 
		 * 
		 * Credits to 'Canned Laughter' Youtube video: https://www.youtube.com/watch?v=Lf760tJIUlc
		 * and Vicky Thakor at https://www.javaquery.com/2016/01/aws-version-4-signing-process-complete.html for pointing in the right direction
		 * 
		 * 
		 */	
		IContext context = this.getContext();	
		TreeMap<String, String> awsHeaders = new TreeMap<String, String>();	
		String awsHost = awsV4Signature.getServiceName().toString() + '.'  + awsV4Signature.getRegion() + ".amazonaws.com";
        awsHeaders.put("host", awsHost);
        awsV4Signature.setHost(awsHost);
        
        TreeMap<String, String> queryPairs = (TreeMap<String, String>) splitQuery(awsV4Signature.getQueryParameters());
		AWSV4Auth aWSV4Auth = new AWSV4Auth.Builder(awsV4Signature.getAWSAccessKey(), awsV4Signature.getAWSSecretKey())
					.regionName(awsV4Signature.getRegion())
					.serviceName(awsV4Signature.getServiceName().toString())
					.httpMethodName(awsV4Signature.getHttpMethod().toString())
					.canonicalURI(awsV4Signature.getCanonicalURI())
					.queryParametes(queryPairs)
					.awsHeaders(awsHeaders)
					.payload(awsV4Signature.getPayload())
					.debug(awsV4Signature.getDebug())
					.build();

		Map<String, String> header = aWSV4Auth.getHeaders();
		for (Map.Entry<String, String> entrySet : header.entrySet()) {
            String key = entrySet.getKey();
            String value = entrySet.getValue();
            AWSHeader awsHeader = new AWSHeader(context);
            awsHeader.setAWSHeader_AWSv4Signature(awsV4Signature);
            awsHeader.setKey(key);
            awsHeader.setValue(value);
        }
		

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AWSv4Signature";
	}

	// BEGIN EXTRA CODE
	public static Map<String, String> splitQuery(String queryString) throws UnsupportedEncodingException {
	    if(queryString.isEmpty()) {
	    	return null;
	    }
		TreeMap<String, String> query_pairs = new TreeMap<String, String>();
	    String[] pairs = queryString.split("&");
	    for (String pair : pairs) {
	        int idx = pair.indexOf("=");
	        query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
	    }
	    return query_pairs;
	}
	// END EXTRA CODE
}
